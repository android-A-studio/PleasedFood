package net.hycollege.ljl.pleasedfoof.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.hycollege.ljl.pleasedfood.bean.FoodBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD_BEAN".
*/
public class FoodBeanDao extends AbstractDao<FoodBean, String> {

    public static final String TABLENAME = "FOOD_BEAN";

    /**
     * Properties of entity FoodBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name_f = new Property(0, String.class, "name_f", true, "NAME_F");
        public final static Property Price_f = new Property(1, int.class, "price_f", false, "PRICE_F");
        public final static Property Picture_f = new Property(2, String.class, "picture_f", false, "PICTURE_F");
        public final static Property Details_f = new Property(3, String.class, "details_f", false, "DETAILS_F");
        public final static Property Utime_f = new Property(4, String.class, "utime_f", false, "UTIME_F");
    }


    public FoodBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FoodBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD_BEAN\" (" + //
                "\"NAME_F\" TEXT PRIMARY KEY NOT NULL ," + // 0: name_f
                "\"PRICE_F\" INTEGER NOT NULL ," + // 1: price_f
                "\"PICTURE_F\" TEXT," + // 2: picture_f
                "\"DETAILS_F\" TEXT," + // 3: details_f
                "\"UTIME_F\" TEXT);"); // 4: utime_f
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FoodBean entity) {
        stmt.clearBindings();
 
        String name_f = entity.getName_f();
        if (name_f != null) {
            stmt.bindString(1, name_f);
        }
        stmt.bindLong(2, entity.getPrice_f());
 
        String picture_f = entity.getPicture_f();
        if (picture_f != null) {
            stmt.bindString(3, picture_f);
        }
 
        String details_f = entity.getDetails_f();
        if (details_f != null) {
            stmt.bindString(4, details_f);
        }
 
        String utime_f = entity.getUtime_f();
        if (utime_f != null) {
            stmt.bindString(5, utime_f);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FoodBean entity) {
        stmt.clearBindings();
 
        String name_f = entity.getName_f();
        if (name_f != null) {
            stmt.bindString(1, name_f);
        }
        stmt.bindLong(2, entity.getPrice_f());
 
        String picture_f = entity.getPicture_f();
        if (picture_f != null) {
            stmt.bindString(3, picture_f);
        }
 
        String details_f = entity.getDetails_f();
        if (details_f != null) {
            stmt.bindString(4, details_f);
        }
 
        String utime_f = entity.getUtime_f();
        if (utime_f != null) {
            stmt.bindString(5, utime_f);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FoodBean readEntity(Cursor cursor, int offset) {
        FoodBean entity = new FoodBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name_f
            cursor.getInt(offset + 1), // price_f
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // picture_f
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // details_f
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // utime_f
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FoodBean entity, int offset) {
        entity.setName_f(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPrice_f(cursor.getInt(offset + 1));
        entity.setPicture_f(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetails_f(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUtime_f(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FoodBean entity, long rowId) {
        return entity.getName_f();
    }
    
    @Override
    public String getKey(FoodBean entity) {
        if(entity != null) {
            return entity.getName_f();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FoodBean entity) {
        return entity.getName_f() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
